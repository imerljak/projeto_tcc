/**
 * This file was generated by the Jeddict
 */
package br.com.imerljak.domain;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.OneToMany;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;
import javax.ws.rs.FormParam;

/**
 * @author Israel Merljak <imerljak@gmail.com.br>
 */
@Entity
public class Usuario extends BaseEntity {

    @Column(name = "nome", nullable = false)
    @Basic
    @FormParam("nome")
    @NotNull
    private String nome;

    @Column(name = "email", nullable = false)
    @Basic(optional = false)
    @FormParam("email")
    @NotNull
    @Email
    private String email;

    @Basic(optional = false)
    @FormParam("senha")
    @NotNull
    private String senha;

    @OneToMany(mappedBy = "relator")
    private List<Processo> processosRelator;

    @OneToMany(mappedBy = "revisor")
    private List<Processo> processosRevisor;

    @OneToMany(mappedBy = "criador")
    private List<Processo> processosCriador;

    public String getNome() {
        return this.nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getSenha() {
        return this.senha;
    }

    public void setSenha(String senha) {
        this.senha = senha;
    }

    public List<Processo> getProcessosRelator() {
        if (processosRelator == null) {
            processosRelator = new ArrayList<>();
        }
        return this.processosRelator;
    }

    public void setProcessosRelator(List<Processo> processosRelator) {
        this.processosRelator = processosRelator;
    }

    public void addProcessosRelator(Processo processosRelator) {
        getProcessosRelator().add(processosRelator);
        processosRelator.setRelator(this);
    }

    public void removeProcessosRelator(Processo processosRelator) {
        getProcessosRelator().remove(processosRelator);
        processosRelator.setRelator(null);
    }

    public List<Processo> getProcessosRevisor() {
        if (processosRevisor == null) {
            processosRevisor = new ArrayList<>();
        }
        return this.processosRevisor;
    }

    public void setProcessosRevisor(List<Processo> processosRevisor) {
        this.processosRevisor = processosRevisor;
    }

    public void addProcessosRevisor(Processo processosRevisor) {
        getProcessosRevisor().add(processosRevisor);
        processosRevisor.setRevisor(this);
    }

    public void removeProcessosRevisor(Processo processosRevisor) {
        getProcessosRevisor().remove(processosRevisor);
        processosRevisor.setRevisor(null);
    }

    public List<Processo> getProcessosCriador() {
        if (processosCriador == null) {
            processosCriador = new ArrayList<>();
        }
        return this.processosCriador;
    }

    public void setProcessosCriador(List<Processo> processosCriador) {
        this.processosCriador = processosCriador;
    }

    public void addProcessosCriador(Processo processosCriador) {
        getProcessosCriador().add(processosCriador);
        processosCriador.setCriador(this);
    }

    public void removeProcessosCriador(Processo processosCriador) {
        getProcessosCriador().remove(processosCriador);
        processosCriador.setCriador(null);
    }

}